apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'

//MainClass - run information
mainClassName = 'main.Main'

sourceCompatibility = 1.8
targetCompatibility = 1.8

//Wrapper
task wrapper(type: Wrapper) {
	gradleVersion = '2.13'
}

//noinspection GroovyAssignabilityCheck
sourceSets {
	main {
		java {
			srcDirs = ["src/main/java", "src/test/java"]
		}
	}
}

//Dependencies and repos
repositories {
	mavenCentral()
}

dependencies {
	compile 'org.json:json:20160810'
	compile 'org.reflections:reflections:0.9.10'

	compile project(':javacommon')
	compile project(':configurate')
	compile project(':hwserver_installer');

	compile 'junit:junit:4.11'
}

//noinspection GroovyAssignabilityCheck
jar {
	name = 'Homework_Server.jar'
	manifest {
		attributes 'Main-Class': 'hwserver.Main'
		//attributes 'Class-Path': configurations.runtime.collect { "libraries/" + it.getName() }.join(' ')
	}
}

//noinspection GroovyAssignabilityCheck
test {
	useJUnit()

	testLogging.showStandardStreams = true
	beforeTest { descriptor ->
		logger.lifecycle("Running test: " + (String) descriptor)
	}

	onOutput { descriptor, event ->
		logger.lifecycle("Test: " + (String) descriptor + " produced standard out/err: " + event.message )
	}
}


task copyRuntimeLibs(type: Copy) {
	into "build/libs/libraries"
	from configurations.runtime
}



//noinspection GroovyAssignabilityCheck
build.finalizedBy(copyRuntimeLibs)

task cleanupCRunDir(type: Delete) {
	FileTree tree = fileTree(dir: "run/_cleanRun");
	tree.exclude "+*"
	tree.each {
		File file -> delete(file)
	}
}

run{
	File workingDirFile = new File('run/_normal');
	if (!workingDirFile.isDirectory())
		workingDirFile.mkdir();

	workingDir = 'run/_normal'
	args = ['--debug --log-no-trace']

	standardInput = System.in
	standardOutput = System.out
}

task debug(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	main = 'main.Main'
	args = ['--debug']
	workingDir = "run/_normal"

	standardInput = System.in
	standardOutput = System.out
}

task cleanRun(dependsOn: cleanupCRunDir, type: JavaExec) {
	File workingDirFile = new File('run/_cleanRun');
	if (!workingDirFile.isDirectory())
		workingDirFile.mkdir();

	classpath = sourceSets.main.runtimeClasspath
	main = 'main.Main'
	args = ["--debug","--log-no-trace"]
	workingDir = "run/_cleanRun"

	standardInput = System.in
	standardOutput = System.out
}
